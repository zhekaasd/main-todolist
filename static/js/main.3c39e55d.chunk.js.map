{"version":3,"sources":["Todolist/AddItemFrom.module.css","common/Button/ButtonComponent.tsx","Todolist/AddItemForm.tsx","EditableSpan.tsx","Todolist/Task/Task.tsx","Todolist/Todolist.tsx","redux/todolists-reducer.ts","redux/task-reducer.ts","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","ButtonComponent","props","Button","size","variant","color","onClick","text","icon","AddItemForm","React","memo","useState","title","setTitle","error","setError","addTask","trim","addItem","cssErrorStyle","cn","style","display","marginBottom","TextField","label","value","onChange","e","newText","currentTarget","onKeyPress","ctrlKey","charCode","className","helperText","EditableSpan","editMode","setEditMode","autoFocus","onDoubleClick","onBlur","Task","key","tasks","id","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Delete","Todolist","removeTodolist","useCallback","changeTodolistTitle","onAllClickHandler","changeFilterTodolist","onActiveClickHandler","onCompletedClickHandler","Grid","container","justify","alignItems","DeleteOutline","Add","fontSize","map","t","filter","initialState","App","useSelector","state","todolists","dispatch","useDispatch","todoListId","action","type","todolistId","taskId","addTaskAC","changeTaskTitleAC","changeTaskStatusAC","changeTodolistFilterAC","addTodolist","v1","changeTodolistTitleAC","AppBar","position","Toolbar","Menu","aria-label","Typography","padding","Container","fixed","spacing","allTodolistTasks","tasksForTodolist","p","item","Paper","Boolean","window","location","hostname","match","rootReducers","combineReducers","stateCopy","newTasks","newTask","changeStatus","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,SAAW,8BAA8B,MAAQ,2BAA2B,KAAO,4B,sNCkBxFC,EAAkB,SAACC,GAoB5B,OAAO,kBAACC,EAAA,EAAD,CAASC,KAAMF,EAAME,KAAMC,QAASH,EAAMG,QAASC,MAAOJ,EAAMI,MAAOC,QAASL,EAAMK,SACxFL,EAAMM,KAAMN,EAAMO,OC3BdC,EAAcC,IAAMC,MAAO,SAACV,GAAsB,IAAD,EAElCW,mBAAS,IAFyB,mBAErDC,EAFqD,KAE9CC,EAF8C,OAGlCF,mBAAwB,MAHU,mBAGrDG,EAHqD,KAG9CC,EAH8C,KAwBpDC,EAAU,WACS,KAAjBJ,EAAMK,QACNjB,EAAMkB,QAAQN,EAAMK,QACpBJ,EAAS,MAETE,EAAS,qBACTF,EAAS,MAIbM,EAAgBC,IAAG,eAClBC,IAAMP,MAAQA,IAGnB,OACI,yBAAKO,MAAQ,CAACC,QAAS,OAAQC,aAAc,SACzC,kBAACC,EAAA,EAAD,CAAWC,MAAOX,EAAQ,QAAU,QAASX,QAAQ,WAAWuB,MAAOd,EAC5De,SAlCK,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cAAcJ,MAC9Bb,EAASgB,GACO,KAAZA,GACAd,EAAS,OA+BEgB,WA1BO,SAACH,GACvBb,EAAS,MACLa,EAAEI,SAA0B,KAAfJ,EAAEK,UACfjB,KAwBWkB,UAAWf,EACXjB,KAAMF,EAAME,KACZY,QAASA,EACTqB,WAAYrB,IAGvB,kBAAC,EAAD,CAAiBT,QAASW,EAAST,KAAMP,EAAMO,WCnD9C6B,EAAe3B,IAAMC,MAAM,SAACV,GAAqB,MAG5BW,oBAAkB,GAHU,mBAGrD0B,EAHqD,KAG3CC,EAH2C,OAIlC3B,mBAAiBX,EAAM0B,OAJW,mBAIrDd,EAJqD,KAI9CC,EAJ8C,KAwC1D,OAAQwB,EACJ,kBAACb,EAAA,EAAD,CAAWe,WAAS,EACTb,MAAOd,EACP4B,cAVe,WAC1BF,GAAY,GACZtC,EAAM2B,SAASf,IASJ6B,OA/BW,WACtBH,GAAY,GACZzB,EAASb,EAAM0B,QA8BJC,SA1BS,SAACC,GACrBf,EAASe,EAAEE,cAAcJ,QA0BdK,WAtBW,SAACH,GACnBA,EAAEI,SAA0B,KAAfJ,EAAEK,WACfK,GAAY,GACZtC,EAAM2B,SAASf,KAoBRV,KAAMF,EAAME,OAErB,0BAAMsC,cA1CY,WACpBF,GAAY,GACZzB,EAASb,EAAM0B,SAwC4B1B,EAAM0B,U,6CC9C5CgB,EAAOjC,IAAMC,MAAK,SAACV,GAgB5B,OACI,6BACI,wBAAI2C,IAAK3C,EAAM4C,MAAMC,GAAIX,UAAWlC,EAAM4C,MAAME,OAAS,OAAS,IAC9D,kBAACC,EAAA,EAAD,CAAUC,QAAShD,EAAM4C,MAAME,OACrBnB,SAbE,SAACC,GACrB5B,EAAMiD,iBAAiBjD,EAAM4C,MAAMC,GAAIjB,EAAEE,cAAckB,QAAShD,EAAM6C,KAapD3C,KAAM,UAGhB,kBAACkC,EAAD,CAAcV,MAAO1B,EAAM4C,MAAMhC,MAAOe,SAbvB,SAACf,GAC1BZ,EAAMkD,gBAAgBlD,EAAM4C,MAAMC,GAAIjC,EAAOZ,EAAM6C,KAY6B3C,KAAM,UAC9E,kBAAC,EAAD,CAAiBG,QAtBL,WACpBL,EAAMmD,WAAWnD,EAAM4C,MAAMC,GAAI7C,EAAM6C,KAqBYtC,KAAM,kBAAC6C,EAAA,EAAD,aCuDlDC,EAnEE5C,IAAMC,MAAM,SAACV,GAG1B,IAAMsD,EAAiBC,uBAAc,WACjCvD,EAAMsD,eAAetD,EAAM6C,MAC5B,CAAC7C,EAAMsD,eAAgBtD,EAAM6C,KAG1B3B,EAAUqC,uBAAc,SAAC3C,GAC3BZ,EAAMgB,QAAQJ,EAAOZ,EAAM6C,MAC5B,CAAC7C,EAAM6C,GAAI7C,EAAMgB,UAGdwC,EAAsBD,uBAAc,SAAC7B,GACvC1B,EAAMwD,oBAAoBxD,EAAM6C,GAAInB,KACrC,CAAC1B,EAAM6C,GAAI7C,EAAMwD,sBAGdC,EAAoBF,uBAAc,WAAOvD,EAAM0D,qBAAqB,MAAO1D,EAAM6C,MAAM,CAAC7C,EAAM0D,qBAAsB1D,EAAM6C,KAC1Hc,EAAuBJ,uBAAc,WAAOvD,EAAM0D,qBAAqB,SAAU1D,EAAM6C,MAAM,CAAC7C,EAAM0D,qBAAsB1D,EAAM6C,KAChIe,EAA0BL,uBAAc,WAAOvD,EAAM0D,qBAAqB,YAAa1D,EAAM6C,MAAM,CAAC7C,EAAM0D,qBAAsB1D,EAAM6C,KAK5I,OAAO,6BACH,kBAACgB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACpB,wBAAI1C,MAAQ,CAACC,QAAS,OAAQ0C,WAAY,WACtC,kBAAC5B,EAAD,CAAcV,MAAO1B,EAAMY,MAAOe,SAAU6B,IAC5C,kBAAC,EAAD,CAAkBnD,QAASiD,EAAgB/C,KAAO,kBAAC0D,EAAA,EAAD,UAG1D,kBAACzD,EAAD,CAAaN,KAAM,QAASgB,QAASA,EAASX,KAAO,kBAAC2D,EAAA,EAAD,CAAKC,SAAU,YAGpE,6BAEQnE,EAAM4C,MAAMwB,KAAI,SAAAC,GACZ,OAAO,kBAAC3B,EAAD,CAAMC,IAAK0B,EAAExB,GAAIA,GAAI7C,EAAM6C,GACrBK,gBAAiBlD,EAAMkD,gBACvBD,iBAAkBjD,EAAMiD,iBACxBE,WAAYnD,EAAMmD,WAClBP,MAAOyB,QAMhC,6BACI,kBAAC,EAAD,CAAiBnE,KAAM,QAASE,MAAO,UAAWD,QAA0B,QAAjBH,EAAMsE,OAAmB,YAAc,OACjFjE,QAASoD,EAAmBnD,KAAM,QACnD,kBAAC,EAAD,CAAiBJ,KAAM,QAASE,MAAO,UAAWD,QAA0B,WAAjBH,EAAMsE,OAAsB,YAAc,OACpFjE,QAASsD,EAAsBrD,KAAM,WACtD,kBAAC,EAAD,CAAiBJ,KAAM,QAASE,MAAO,YACtBD,QAA0B,cAAjBH,EAAMsE,OAAyB,YAAc,OACtDjE,QAASuD,EAAyBtD,KAAM,mB,yBC/C/DiE,EAAoC,G,QCMpCA,EAA+B,G,qDCsHtBC,MAzHf,WAGE,IAAM5B,EAAQ6B,aAAiD,SAAAC,GAAK,OAAIA,EAAM9B,SAExE+B,EAAYF,aAAsD,SAAAC,GAAK,OAAIA,EAAMC,aACjFC,EAAWC,cAIX1B,EAAaI,uBAAY,SAACV,EAAYiC,GAC1C,IAAMC,EDqDC,CAACC,KAAM,cAAeC,WCrDDH,EDqDyBI,OCrDbrC,GACxC+B,EAASG,KACR,CAACH,IAGE5D,EAAUuC,uBAAY,SAAC3C,EAAekE,GAC1C,IAAMC,EDkDe,SAACE,EAAoBrE,GAC1C,MAAO,CAACoE,KAAM,WAAYC,WAAYA,EAAYrE,MAAOA,GCnD1CuE,CAAUL,EAAYlE,GACrCgE,EAASG,KACR,CAACH,IAGE1B,EAAkBK,uBAAY,SAAC2B,EAAgBtE,EAAekE,GAClEF,EDgD6B,SAACK,EAAoBC,EAAgBtE,GAClE,MAAO,CAACoE,KAAM,oBAAqBC,WAAYA,EAAYC,OAAQA,EAAQtE,MAAOA,GCjDzEwE,CAAkBN,EAAYI,EAAQtE,MAC9C,CAACgE,IAGE3B,EAAmBM,uBAAY,SAAC2B,EAAgBpC,EAAiBgC,GACrEF,ED+C8B,SAACK,EAAoBC,EAAgBpC,GACnE,MAAO,CAACkC,KAAM,qBAAsBC,WAAYA,EAAYC,OAAQA,EAAQpC,OAAQA,GChD3EuC,CAAmBP,EAAYI,EAAQpC,MAC/C,CAAC8B,IAIElB,EAAuBH,uBAAY,SAACe,EAA0BW,GAClE,IAAMF,EFW4B,SAAClC,EAAYyB,GAC/C,MAAO,CAAEU,KAAM,yBAA0BnC,GAAIA,EAAIyB,OAAQA,GEZ1CgB,CAAuBL,EAAYX,GAClDM,EAASG,KACR,CAACH,IAGEtB,EAAiBC,uBAAY,SAACuB,GAClCF,EFNO,CAAEI,KAAM,kBAAmBnC,GEMRiC,MACzB,CAACF,IAGEW,EAAchC,uBAAY,SAAC3C,GAC/BgE,EFPO,CAAEI,KAAM,eAAgBpE,MEORA,EFPiCqE,WAAYO,kBEQnE,CAACZ,IAGEpB,EAAsBD,uBAAY,SAAUV,EAAYjC,GAC5D,IAAMmE,EFT2B,SAAClC,EAAYjC,GAC9C,MAAO,CAAEoE,KAAM,wBAAyBnC,GAAIA,EAAIjC,MAAOA,GEQxC6E,CAAsB5C,EAAIjC,GACzCgE,EAASG,KACR,CAACH,IAGJ,OACI,yBAAK1C,UAAU,OACb,kBAACwD,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiBxF,MAAO,UAAWG,KAAO,kBAACsF,EAAA,EAAD,CAAOC,aAAY,WAC7D,kBAACC,EAAA,EAAD,CAAa5F,QAAQ,MAArB,OAGA,kBAAC,EAAD,CAAiBC,MAAO,UAAWE,KAAM,YAM7C,kBAACuD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,SAAU1C,MAAQ,CAAC2E,QAAS,SACnD,kBAACxF,EAAD,CAAaU,QAASqE,EAAahF,KAAO,kBAAC2D,EAAA,EAAD,CAAKC,SAAU,aAI3D,kBAAC8B,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACrC,EAAA,EAAD,CAAMC,WAAS,EAACqC,QAAS,EAAGpC,QAAQ,UAEhCY,EAAUP,KAAI,SAAAC,GAER,IAAI+B,EAAmBxD,EAAMyB,EAAExB,IAC3BwD,EAAmBD,EAYvB,MATiB,WAAb/B,EAAEC,SACJ+B,EAAmBD,EAAiB9B,QAAO,SAAAgC,GAAC,OAAiB,IAAbA,EAAExD,WAInC,cAAbuB,EAAEC,SACJ+B,EAAmBD,EAAiB9B,QAAO,SAAAgC,GAAC,OAAiB,IAAbA,EAAExD,WAIhD,kBAACe,EAAA,EAAD,CAAM0C,MAAI,GACR,kBAACC,EAAA,EAAD,CAAOrG,QAAS,YAAakB,MAAO,CAAC2E,QAAS,SAC5C,kBAAC,EAAD,CACIpF,MAAOyD,EAAEzD,MACT0D,OAAQD,EAAEC,OACVzB,GAAIwB,EAAExB,GACNF,IAAK0B,EAAExB,GACPD,MAAOyD,EACPlD,WAAYA,EACZO,qBAAsBA,EACtB1C,QAASA,EACTiC,iBAAkBA,EAClBK,eAAgBA,EAChBJ,gBAAiBA,EACjBM,oBAAqBA,aCrIjCiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCbAC,EAAgBC,YAAgB,CAClCnE,MHuCuB,WAAgF,IAA/E8B,EAA8E,uDAAtDH,EAAcQ,EAAwC,uCACtG,OAAQA,EAAOC,MAEX,IAAK,cAED,IAAMgC,EAAS,eAAOtC,GAChB9B,EAAQoE,EAAUjC,EAAOE,YACzBgC,EAAWrE,EAAM0B,QAAO,SAAAD,GAAC,OAAIA,EAAExB,IAAMkC,EAAOG,UAGlD,OAFA8B,EAAUjC,EAAOE,YAAcgC,EAExBD,EAGX,IAAK,WACD,IAAMA,EAAS,eAAOtC,GAChBwC,EAAU,CAACrE,GAAI2C,cAAM5E,MAAOmE,EAAOnE,MAAOkC,QAAQ,GAGxD,OAFAkE,EAAUjC,EAAOE,YAAjB,CAAgCiC,GAAhC,mBAA4CF,EAAUjC,EAAOE,cAEtD+B,EAGX,IAAK,oBACD,IAAIA,EAAS,eAAOtC,GAChByC,EAAeH,EAAUjC,EAAOE,YAGpC,OAFA+B,EAAUjC,EAAOE,YAAckC,EAAa/C,KAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOkC,EAAOG,OAAhB,eAA6Bb,EAA7B,CAAgCzD,MAAOmE,EAAOnE,QAASyD,KAEtG2C,EAGX,IAAK,qBACD,IAAIA,EAAS,eAAOtC,GAChByC,EAAeH,EAAUjC,EAAOE,YAGpC,OAFA+B,EAAUjC,EAAOE,YAAckC,EAAa/C,KAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOkC,EAAOG,OAAhB,eAA6Bb,EAA7B,CAAgCvB,OAAQiC,EAAOjC,SAAUuB,KAExG2C,EAGX,IAAK,eACD,IAAMA,EAAS,eAAOtC,GAGtB,OAFAsC,EAAUjC,EAAOE,YAAc,GAExB+B,EAGX,IAAK,kBACD,IAAMA,EAAS,eAAOtC,GAGtB,cAFOsC,EAAUjC,EAAOlC,IAEjBmE,EAGX,QACI,OAAO,eAAItC,KG1FnBC,UJ+B4B,WAA0F,IAAzFD,EAAwF,uDAA3DH,EAAcQ,EAA6C,uCACrH,OAAQA,EAAOC,MACX,IAAK,kBACY,YAAON,GAEpB,OADYA,EAAMJ,QAAO,SAAAD,GAAC,OAAIA,EAAExB,KAAOkC,EAAOlC,MAIlD,IAAK,eACD,MAAM,GAAN,mBAAW6B,GAAX,CAAkB,CAAC7B,GAAIkC,EAAOE,WAAYrE,MAAOmE,EAAOnE,MAAO0D,OAAQ,SAE3E,IAAK,wBACD,IAAM8C,EAAW1C,EAAM2C,MAAK,SAAAhD,GAAC,OAAIA,EAAExB,KAAOkC,EAAOlC,MAIjD,OAHIuE,IACAA,EAASxG,MAAQmE,EAAOnE,OAErB,YAAI8D,GAGf,IAAK,yBACD,IAAM0C,EAAW1C,EAAM2C,MAAK,SAAAhD,GAAC,OAAIA,EAAExB,KAAOkC,EAAOlC,MAIjD,OAHIuE,IACAA,EAAS9C,OAASS,EAAOT,QAEtB,YAAII,GAGf,QACI,OAAOA,MIxDN4C,EAAQC,YAAYT,GAMjCJ,OAAOY,MAAQA,ECRfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApH,GACLqH,QAAQrH,MAAMA,EAAMsH,c","file":"static/js/main.3c39e55d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMsg\":\"AddItemFrom_errorMsg__pO7uj\",\"error\":\"AddItemFrom_error__dvBZ6\",\"done\":\"AddItemFrom_done__1S0wO\"};","import React, {InputHTMLAttributes, useState} from \"react\";\r\nimport style from \"./Button.module.css\";\r\nimport cn from \"classnames\";\r\nimport {FilterValuesType} from \"../../App\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Add, AddBox} from \"@material-ui/icons\";\r\n\r\ntype PropsButtonType = {\r\n    text?: string\r\n    filter?: FilterValuesType\r\n    onClick?: () => void\r\n    typeButton?: \"default\" | \"danger\" | \"success\" | \"info\";\r\n    color?: \"default\" | \"inherit\" | \"primary\" | \"secondary\" | undefined;\r\n    variant?: \"text\" | \"outlined\" | \"contained\";\r\n    size?: \"small\" | \"medium\" | \"large\" | undefined;\r\n    icon?: React.ReactNode;\r\n}\r\n\r\n\r\nexport const ButtonComponent = (props: PropsButtonType) => {\r\n\r\n\r\n\r\n    /*    let css1 = cn({\r\n            [style.button]: true,\r\n            [`${style.activeFilter} ${style.info}`]: props.filter === 'all' && props.typeButton === 'info',\r\n            [`${style.activeFilter} ${style.danger}`]: props.filter === 'active' && props.typeButton === 'danger' ,\r\n            [`${style.activeFilter} ${style.success}`]: props.filter === 'completed' && props.typeButton === 'success'\r\n        })\r\n\r\n        let css = cn({\r\n            [style.button]: true,\r\n            [style.danger]: props.typeButton === 'danger',\r\n            [style.info]: props.typeButton === 'info' ,\r\n            [style.success]: props.typeButton === 'success',\r\n        })*/\r\n\r\n\r\n\r\n    return <Button  size={props.size} variant={props.variant} color={props.color} onClick={props.onClick}>\r\n        {props.text}{props.icon}\r\n    </Button>\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport '../App.css';\r\nimport style from \"./AddItemFrom.module.css\";\r\nimport cn from \"classnames\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {ButtonComponent} from \"../common/Button/ButtonComponent\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n    size?: \"small\" | \"medium\"\r\n    icon?: React.ReactNode;\r\n}\r\n\r\nexport const AddItemForm = React.memo ( (props: PropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n\r\n    /*изменение значения поля ввода */\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newText = e.currentTarget.value;\r\n        setTitle(newText);\r\n        if (newText !== '') {\r\n            setError(null);\r\n        }\r\n    }\r\n\r\n    /*добаление новых данных сочетанием клавиш*/\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    /*добавление новых данных по клику*/\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError(\"Title is required\");\r\n            setTitle('');\r\n        }\r\n    }\r\n\r\n    let cssErrorStyle = cn({\r\n        [style.error]: error\r\n    })\r\n\r\n    return(\r\n        <div style={ {display: \"flex\", marginBottom: '10px'} }>\r\n            <TextField label={error ? \"Error\" : \"Title\"} variant=\"outlined\" value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={cssErrorStyle}\r\n                       size={props.size}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            <ButtonComponent onClick={addTask} icon={props.icon} />\r\n        </div>\r\n    )\r\n} );\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    value : string\r\n    // addItemNew: (newMaps: string) => void\r\n    // onChange: (title : string) => void\r\n    onChange: (newValue : string) => void\r\n    size?: \"small\" | \"medium\"\r\n}\r\n\r\nexport const EditableSpan = React.memo( (props: PropsType) => {\r\n\r\n//локальный стейт переключения между спаном и инпутом\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value);\r\n\r\n//активация редактирования имени таски\r\n    let activatedEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n\r\n//деАктивация редактирования имени таски\r\n    let deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        setTitle(props.value);\r\n    }\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            setEditMode(false);\r\n            props.onChange(title);\r\n            // props.addCsData(title, props.id);\r\n            // setTitle('');\r\n        }\r\n    }\r\n\r\n    let onChangeTaskDoubleClick = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n\r\n\r\n\r\n    return (editMode) ?\r\n        <TextField autoFocus\r\n                   value={title}\r\n                   onDoubleClick={onChangeTaskDoubleClick}\r\n                   onBlur={deActivatedEditMode}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   size={props.size}\r\n        />\r\n        : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n} );\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../EditableSpan\";\r\nimport {ButtonComponent} from \"../../common/Button/ButtonComponent\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../../App\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    tasks: TaskType\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n//удаление таски\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.tasks.id, props.id)\r\n    };\r\n//изменение значения checkbox (true \\ false)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.tasks.id, e.currentTarget.checked, props.id)\r\n    };\r\n// изменение имени таски\r\n    const onChangeTitleHandler = (title: string) => {\r\n        props.changeTaskTitle(props.tasks.id, title, props.id)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <li key={props.tasks.id} className={props.tasks.isDone ? 'done' : ''}>\r\n                <Checkbox checked={props.tasks.isDone}\r\n                          onChange={onChangeHandler}\r\n                          size={\"small\"}\r\n                />\r\n\r\n                <EditableSpan value={props.tasks.title} onChange={onChangeTitleHandler} size={'small'}/>\r\n                <ButtonComponent onClick={onRemoveHandler} icon={<Delete/>}/>\r\n            </li>\r\n        </div>\r\n    )\r\n});","import React, {useCallback} from 'react';\r\nimport '../App.css';\r\nimport {FilterValuesType, TaskType} from \"./../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan\";\r\nimport {ButtonComponent} from \"../common/Button/ButtonComponent\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Add, DeleteOutline} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id  : string\r\n    key : string\r\n    tasks : Array<TaskType>\r\n    title : string\r\n    removeTask : (taskId : string, todolistId : string) => void\r\n    changeFilterTodolist : (value: FilterValuesType, todolistId : string) => void\r\n    addTask : (title : string, todoListId : string) => void\r\n    changeTaskStatus : (id : string, isDone : boolean, todoListId : string) => void\r\n    filter : FilterValuesType\r\n    removeTodolist : (todoListId : string) => void\r\n    changeTaskTitle: (taskId : string, title : string, todoListId : string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\n\r\nconst Todolist = React.memo( (props : PropsType) => {\r\n\r\n//удаление тудулиста и тасок\r\n    const removeTodolist = useCallback ( () =>  {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id]);\r\n\r\n//добавление таски\r\n    const addItem = useCallback ( (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.id, props.addTask]);\r\n\r\n//изменение названия тудулиста\r\n    const changeTodolistTitle = useCallback ( (value: string) => {\r\n        props.changeTodolistTitle(props.id, value);\r\n    }, [props.id, props.changeTodolistTitle]);\r\n\r\n//изменение фильтрации тасок\r\n    const onAllClickHandler = useCallback ( () => {props.changeFilterTodolist('all', props.id)}, [props.changeFilterTodolist, props.id]);\r\n    const onActiveClickHandler = useCallback ( () => {props.changeFilterTodolist('active', props.id)}, [props.changeFilterTodolist, props.id]);\r\n    const onCompletedClickHandler = useCallback ( () => {props.changeFilterTodolist('completed', props.id)}, [props.changeFilterTodolist, props.id]);\r\n\r\n\r\n\r\n\r\n    return <div>\r\n        <Grid container justify='center'>\r\n            <h2 style={ {display: \"flex\", alignItems: \"center\"} }>\r\n                <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n                <ButtonComponent  onClick={removeTodolist} icon={ <DeleteOutline /> } />\r\n            </h2>\r\n        </Grid>\r\n        <AddItemForm size={'small'} addItem={addItem} icon={ <Add fontSize={\"small\"} /> } />\r\n\r\n\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    return <Task key={t.id} id={props.id}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 removeTask={props.removeTask}\r\n                                 tasks={t}/>\r\n                })\r\n            }\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <ButtonComponent size={'small'} color={'default'} variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                             onClick={onAllClickHandler} text={'All'}/>\r\n            <ButtonComponent size={'small'} color={'primary'} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                             onClick={onActiveClickHandler} text={'Active'}/>\r\n            <ButtonComponent size={'small'} color={'secondary'}\r\n                             variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                             onClick={onCompletedClickHandler} text={'Completed'}/>\r\n        </div>\r\n    </div>\r\n} );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Todolist;\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {act} from \"react-dom/test-utils\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string,\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistType> = [];\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            let stateCopy = [...state];\r\n            stateCopy = state.filter(t => t.id !== action.id);\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(t => t.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state];\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(t => t.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId }\r\n}\r\n\r\nexport const addTodolistAC = (newTodolistTitle: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: newTodolistTitle, todolistId: v1() }\r\n}\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title }\r\n}\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter }\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskTitleActionType |\r\n    ChangeTaskStatusActionType |\r\n    AddTodolistActionType |\r\n    RemoveTodolistActionType\r\n    ;\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"REMOVE-TASK\": {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state};\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            stateCopy[action.todolistId] = [newTask, ...stateCopy[action.todolistId]];\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let stateCopy = {...state};\r\n            let changeStatus = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = changeStatus.map( t => t.id === action.taskId ? {...t, title: action.title} : t );\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let stateCopy = {...state};\r\n            let changeStatus = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = changeStatus.map( t => t.id === action.taskId ? {...t, isDone: action.isDone} : t );\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        default:\r\n            return {...state};\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", todolistId: todolistId, taskId: taskId}\r\n}\r\n\r\nexport const addTaskAC = (todolistId: string, title: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", todolistId: todolistId, title: title}\r\n}\r\n\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", todolistId: todolistId, taskId: taskId, title: title}\r\n}\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", todolistId: todolistId, taskId: taskId, isDone: isDone}\r\n}\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\nimport './App.css';\nimport Todolist from \"./Todolist/Todolist\";\nimport {v1} from \"uuid\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootReducersType} from \"./redux/store\";\nimport {\n  addTodolistAC,\n  changeTodolistFilterAC,\n  changeTodolistTitleAC,\n  removeTodolistAC\n} from \"./redux/todolists-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./redux/task-reducer\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Add, Menu, Search} from \"@material-ui/icons\";\nimport {AddItemForm} from \"./Todolist/AddItemForm\";\nimport {ButtonComponent} from \"./common/Button/ButtonComponent\";\n\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\n\nexport type TodolistType = {\n  id: string\n  title: string\n  filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\n\nfunction App() {\n\n//хуком useSelector достаем из стора данные о тасках\n  const tasks = useSelector<AppRootReducersType, TasksStateType>(state => state.tasks);\n//хуком useSelector достаем из стора данные о тудулистах\n  const todolists = useSelector<AppRootReducersType, Array<TodolistType>>(state => state.todolists);\n  const dispatch = useDispatch();\n\n\n// удаление таски\n  const removeTask = useCallback((id: string, todoListId: string) => {\n    const action = removeTaskAC(todoListId, id);\n    dispatch(action);\n  }, [dispatch]);\n\n// добавление новой таски\n  const addTask = useCallback((title: string, todoListId: string) => {\n    const action = addTaskAC(todoListId, title);\n    dispatch(action);\n  }, [dispatch]);\n\n// изменение названия таски\n  const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\n    dispatch(changeTaskTitleAC(todoListId, taskId, title));\n  }, [dispatch]);\n\n// изменение значения checkbox'а в таске\n  const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\n    dispatch(changeTaskStatusAC(todoListId, taskId, isDone));\n  }, [dispatch]);\n\n\n// сортировка задач по типу(все, выполненные, активные)\n  const changeFilterTodolist = useCallback((filter: FilterValuesType, todolistId: string) => {\n    const action = changeTodolistFilterAC(todolistId, filter);\n    dispatch(action);\n  }, [dispatch]);\n\n// удаление тудулиста и его тасок\n  const removeTodolist = useCallback((todoListId: string) => {\n    dispatch(removeTodolistAC(todoListId));\n  }, [dispatch]);\n\n// добавление нового тудулиста\n  const addTodolist = useCallback((title: string) => {\n    dispatch(addTodolistAC(title));\n  }, [dispatch]);\n\n// изменение названия тудулиста\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\n    const action = changeTodolistTitleAC(id, title);\n    dispatch(action);\n  }, [dispatch])\n\n\n  return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <ButtonComponent color={\"inherit\"} icon={ <Menu  aria-label={\"menu\"}  /> } />\n            <Typography  variant=\"h6\">\n              WTF\n            </Typography>\n            <ButtonComponent color={\"inherit\"} text={\"Login\"}/>\n          </Toolbar>\n        </AppBar>\n\n\n\n        <Grid container justify={'center'} style={ {padding: '20px'} }>\n          <AddItemForm addItem={addTodolist} icon={ <Add fontSize={\"large\"} /> }/>\n        </Grid>\n\n\n        <Container fixed>\n          <Grid container spacing={3} justify='center'>\n            {\n              todolists.map(t => {\n\n                    let allTodolistTasks = tasks[t.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    //сортировка тасок по фильтру 'active'\n                    if (t.filter === 'active') {\n                      tasksForTodolist = allTodolistTasks.filter(p => p.isDone === false);\n                    }\n\n                    //сортировка тасок по фильтру 'completed'\n                    if (t.filter === 'completed') {\n                      tasksForTodolist = allTodolistTasks.filter(p => p.isDone === true);\n                    }\n\n                    return (\n                        <Grid item>\n                          <Paper variant={'elevation'} style={{padding: '10px'}}>\n                            <Todolist\n                                title={t.title}\n                                filter={t.filter}\n                                id={t.id}\n                                key={t.id}\n                                tasks={tasksForTodolist}\n                                removeTask={removeTask}\n                                changeFilterTodolist={changeFilterTodolist}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                            />\n                          </Paper>\n                        </Grid>\n                    )\n                  }\n              )}\n          </Grid>\n        </Container>\n      </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {taskReducer} from \"./task-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\n\r\nconst rootReducers =  combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducers);\r\n\r\nexport type AppRootReducersType = ReturnType<typeof rootReducers>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}